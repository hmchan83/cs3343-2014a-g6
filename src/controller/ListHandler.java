package controller;

import ioModule.DebugMessager;

import java.util.ArrayList;

import controller.MainController;
import exceptionPackage.CoreNotAddedExc;
import store.Course;
import store.Section;


public class ListHandler {
	static String title = "ListHandler : ";
	public ListHandler(){
		
	}
	/**
	 * Try to found out the priority and conflict number of each section
	 * @param list courselist generated by the Main
	 * @throws CoreNotAddedExc 
	 */
	public void listformat(ArrayList<Course> list) throws CoreNotAddedExc{
		DebugMessager.debug(title+"\tStart setting priority");
		int CourseCounter = 1;
		OverlapDetector overlapDetector = new OverlapDetector(); // for compulsory course
		int maxSecNum=0;
		Boolean SimpleCase = true; 
		for(Course c : list){ // get the largest Section nums => used to determine the priority
			/* if the Max. Section of ALL course < 10 the priority will be 2 digit
			 * if the number is >=10 and <100 the priority will be 2 digit
			 * the most left number is refer to the course, that means section for same course will have same value
			 */
			if(maxSecNum<c.SectionNum()){
				maxSecNum=c.SectionNum(); 
			}
			c.setPriority(CourseCounter++);
		}
		DebugMessager.debug(title+"Largest Section Num = "+maxSecNum);
		int places = (int) (Math.floor(Math.log10(maxSecNum))+1);
		DebugMessager.debug(title+"Places need = "+places);
		int courseNum = list.size();
		for(int i=0;i<courseNum;i++){ // init the Priority table
			Course c = list.get(i);
			DebugMessager.debug(title+"handling Course "+c.getCourseID());
			ArrayList<Section> seclist=c.getSec();
			int tempPriority=(courseNum-c.getPriority()+1)*((int)Math.pow(10, places)) + seclist.size();
			for(int j=0;j<seclist.size();j++){
				Section s = seclist.get(j);
				DebugMessager.debug(title+"\thandling Section "+s.getSectionID());
				
				//For T01 / L01 cases, consider they are both Lab session that require a linked lecture session
				if(c.HasLab()==false && (s.getSectionID().charAt(0)=='T' || s.getSectionID().charAt(0)=='L')){
					c.setHasLab(true);
					/* Prepare the base table here*/
				}
				if(c.IsCore()){
					//TODO : put the course in to overlapDetector
					for(Section section : c.getSec()){
						boolean success = overlapDetector.set(section.getDay(),section.getStartTime(),section.getEndTime());
						if(!success){
							throw new CoreNotAddedExc("The Core Course can not be added");
						}
					}
				}
				
				s.setPriority(tempPriority--);
				int CourseConflict = ConflictDetector.run(list, i,s);
				
				s.setCourseConflict(CourseConflict);
				DebugMessager.debug(title+"\tSection "+s.getSectionID()+", priority = "+tempPriority);
			}
			if(c.getSecNumMinConflict()==seclist.size()){
				DebugMessager.debug(title+"SecNums of Min Conflict = sessionNums, Using ComplexHandler");
				SimpleCase = false;
			}
		}
		if(courseNum<=2){
			DebugMessager.debug(title+"courseNums <=2, Using SimpleHandler");
			SimpleCase=true;
		}
		OverlapDetector.setBaseTable(overlapDetector.getTable());
		MainController.setSimpleHandler(SimpleCase);
		DebugMessager.debug(title+"\tListHandler End.");
	}

}
